plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

//获取时间，添加到发布版本中
static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

enum KeyType {
    Integer,
    String,
    Boolean
}

static def getTargetType(KeyType keyType, String str) {
    def value
    switch (keyType) {
        case KeyType.Integer:
            value = Integer.valueOf(str)
            break
        case KeyType.String:
            value = str
            break
        case KeyType.Boolean:
            value = Boolean.valueOf(str)
            break
    }

    return value
}

def getVersionInfo(String releaseKey, String debugKey, KeyType keyType) {
    def versionFile = file('version.properties')

    if (versionFile.canRead()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(versionFile))
        //读取version.properties文件存放的版本号。
        def versionInfo = getTargetType(keyType, properties[releaseKey])

        def taskNames = gradle.startParameter.taskNames
        for (def name : taskNames) {
            if (name.toString().toLowerCase().contains('release')) {
                versionInfo = getTargetType(keyType, properties[releaseKey])
            } else if (name.toString().toLowerCase().contains('debug')) {
                versionInfo = getTargetType(keyType, properties[debugKey])
            }
        }

        return versionInfo
    } else {
        throw new GradleException("无法读取version.properties文件！")
    }
}

// 生成版本信息
def generateVersionCode() {
    return getVersionInfo("RELEASE_VERSION_CODE", "DEBUG_VERSION_CODE", KeyType.Integer)
}

def generateVersionName() {
    return getVersionInfo("VERSION_NAME", "VERSION_NAME", KeyType.String)
}

// 是否启用精简
static def isEnableMiniFy() {
    return true
}

static def isEnableShrinkResources() {
    return isEnableMiniFy()
}

// 后缀
def generateSuffix() {
    return getVersionInfo("RELEASE_SUFFIX", "DEBUG_SUFFIX", KeyType.String)
}

android {
    namespace 'com.venus.backgroundopt'
    compileSdk 33

    defaultConfig {
        applicationId "com.venus.backgroundopt"
        minSdk 31
        targetSdk 33
        versionCode generateVersionCode()
        versionName generateVersionName() + "_vc${versionCode}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        multiDexEnabled true
//        ndk{
//            //强制使用架构 就可以解决打包大问题。
//            abiFilters "arm64-v8a", "armeabi-v7a", "armeabi", "x86_64", "x86"
//        }
    }

    buildTypes {
        release {
            minifyEnabled isEnableMiniFy()
            shrinkResources isEnableShrinkResources()

            versionNameSuffix generateSuffix()

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-log.pro'
        }

        debug {
            versionNameSuffix generateSuffix()

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-log.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_19
        targetCompatibility JavaVersion.VERSION_19
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_19.toString()
    }
//    packagingOptions {
//        jniLibs {
//            useLegacyPackaging true
//        }
//    }

    android.applicationVariants.configureEach {
        variant ->
            variant.outputs.configureEach {
                //这里修改apk文件名
//                outputFileName = "backgroundOpt_v${defaultConfig.versionName}_vc${defaultConfig.versionCode}" + generateSuffix() + "_" + releaseTime() + ".apk"
                outputFileName = "backgroundOpt_v${defaultConfig.versionName}" + generateSuffix() + "_" + releaseTime() + ".apk"
            }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    compileOnly 'de.robv.android.xposed:api:82'
//    compileOnly 'de.robv.android.xposed:api:82:sources'

    implementation 'com.alibaba:fastjson:2.0.30'
//    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.7.21'

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}